name: Release Action

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref'
        required: true
        default: 'main'
      version:
        description: 'Version'
        required: true

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Create Release
        uses: actions/github-script@v7
        env:
          INPUT_REF: ${{ inputs.ref }}
          INPUT_VERSION: ${{ inputs.version }}
        with:
          script: |
            const inputs = {
              version: core.getInput('version', {required: true}),
              ref: core.getInput('ref', {required: true}),
            }
            if(!inputs.version.match(/^\d+\.\d+\.\d/)) {
              core.setFailed('Invalid input(s)')
              core.error(`  version needs to follow valid semantic version format e.g. 1.0.3`)
              return
            }

            core.info('Create Release ' + inputs.version + ` (v${inputs.version})`)
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: inputs.version,
              tag_name: 'v' + inputs.version,
              target_commitish: inputs.ref,
            }).then(res => res.data)

            const releaseTag = await octokit2.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/' + release.tag_name
            }).then(res => res.data)

            const majorVersion = inputs.version.match(/^(?<major>\d+)/).groups.major
            core.info('Move Major Version Tag v' + majorVersion)
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/' + 'v' + majorVersion,
              sha: releaseTag.object.sha,
              force: true,
            })

